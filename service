#!/usr/bin/env node

import process from 'node:process';

const [,, command, actionName, ...args_] = process.argv;

if (new Set([command, actionName]).isSubsetOf(new Set(['make', 'action']))) {
	const {makeAction} = await import('./scripts/make-action/index.js');
	await makeAction(args_[0]);
	console.info(`
	âœ… Action ${args_[0]} created.
	ðŸ‘‰ You can now implement the action in service/src/actions/${args_[0]}/index.js
`);
}

if (new Set([command, actionName]).isSubsetOf(new Set(['build', 'docs']))) {
	const {buildDocs} = await import('./scripts/build-docs/index.js');
	await buildDocs();
	console.info(`
	âœ… docs generated.
`);
}

if (new Set([command, actionName]).isSubsetOf(new Set(['build', 'sdk']))) {
	const {buildSdk} = await import('./scripts/build-sdk/index.js');
	await buildSdk();
	console.info(`
	âœ… SDK actions generated.
`);
}

if (!command || !actionName) {
	console.info(`
Microservice Framework

Usage:
	node service make action {actionName}  # Create a new action (Only camelCase is supported)
	node service build sdk                  # Build the SDK
	node service build docs                 # Build the docs
`);
}